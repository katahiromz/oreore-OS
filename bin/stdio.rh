// header file for Kous-OS application
 const EOF  0xffffffffffffffff
 const ERROR  0xffffffffffffffff
 const NULL  0x0000000000000000
 const SPACE  0x0000000000000020
 const CR  0x000000000000000d
 const LF  0x000000000000000a
 const PLUS  0x000000000000002b
 const MINUS  0x000000000000002d
 const MULT  0x000000000000002a
 const DIV  0x000000000000002f
 const ESC  0x000000000000001b
 const CONOUT  0x0000000000000001
 const CONIN  0x0000000000000002
 const NaN  0x8000000000000000
 const STACK_SIZE  0x0000000000002ee0
 const FILE_SIZE  0x0000000000000010
 const TCB_SIZE  0x0000000000000080
 const STATUS  0x0000000000000000
 const CMD_LINE  0x0000000000000008
 const START  0x0000000000000010
 const SIZE  0x0000000000000018
 const STACK  0x0000000000000020
 const INDEV  0x0000000000000028
 const OUTDEV  0x0000000000000030
 const MESSAGE  0x0000000000000038
 const CLIENT  0x0000000000000040
 const RCX  0x0000000000000048
 const RDX  0x0000000000000050
 const RDI  0x0000000000000058
 const RSI  0x0000000000000060
 const NEXT_TCB  0x0000000000000068
 const PREV_TCB  0x0000000000000070
 const SP  0x0000000000000078
 const RUN  0x0000000000000001
 const STOP  0x0000000000000000
 const SYNC  0x0000000000000000
 const CREATE_TASK  0x0000000000000001
 const EXIT_TASK  0x0000000000000002
 const DELETE_TASK  0x0000000000000003
 const RUN_TASK  0x0000000000000004
 const GO_TASK  0x0000000000000005
 const WAIT_TASK  0x0000000000000006
 const STOP_TASK  0x0000000000000007
 const SEND_MESSAGE  0x0000000000000008
 const GET_MESSAGE  0x0000000000000009
 const EXIT_PROCESS  0x000000000000000a
 const _WIDE  0x000000000000000b
 const _NALLOW  0x000000000000000c
 const GETC  0x000000000000000d
 const _READ  0x000000000000000e
 const PUTC  0x000000000000000f
 const _WRITE  0x0000000000000010
 const WOPEN  0x0000000000000011
 const ROPEN  0x0000000000000012
 const OPEN  0x0000000000000013
 const RCLOSE  0x0000000000000014
 const WCLOSE  0x0000000000000015
 const DELETE  0x0000000000000016
 const VOL_OPEN  0x0000000000000017
 const VOL_CLOSE  0x0000000000000018
 const VOL_READ  0x0000000000000019
 const FPRINTS  0x000000000000001a
 const FPRINTD  0x000000000000001b
 const FNL  0x000000000000001c
 const FINPUTS  0x000000000000001d
 const STRCMP  0x000000000000001e
 const STRCPY  0x000000000000001f
 const STRCAT  0x0000000000000021
 const STRSTR  0x0000000000000022
 const STRLEN  0x0000000000000023
 const ATOI  0x0000000000000024
 const ITOA  0x0000000000000025
 const BIN  0x0000000000000026
 const OCT  0x0000000000000027
 const DEC  0x0000000000000028
 const HEX  0x0000000000000029
 const ABS  0x000000000000002a
 const PALLOC  0x000000000000002b
 const PFREE  0x000000000000002c
 const MALLOC  0x000000000000002d
 const FREE  0x000000000000002e
 const LOAD  0x000000000000002f
 const CLS  0x0000000000000064
 const LOCATE  0x0000000000000065
 const CURSOR  0x0000000000000066
 const INKEY  0x0000000000000067
 const GETCH  0x0000000000000068
 const PUTCH  0x0000000000000069
 const WPUTS  0x000000000000006a
 const __critical  0x000000000040a658
 const __stack_p  0x000000000040a660
 const __int_enable  0x000000000040a668
 const __int_busy  0x000000000040a670
 const __sys_nest  0x000000000040a678
 const time  0x000000000040a688
 const SYS_CALL  0x000000000040a690
 const SYS_EXT  0x000000000040a698
 const tasks  0x000000000040a6a0
 const present_task  0x000000000040a6a8
 const __stack_top  0x000000000040a6b0
 const tcb0  0x000000000040a6b8
 const cmd_buf  0x000000000040a9c8
 const argc  0x000000000040acc8
 const argv  0x000000000040acd0
 const __prog_start  0x000000000040adb0
// "stdio.base" the base text of "stdio.rh"

__xxmain1:
  goto __xxmain2

// TCB area
 .data
__tcb:
 data 0,0,0,0,0,0,0,0
 data 0,0,0,0,0,0,0,0

 long   read_p#

sync:
 @SYS_CALL(SYNC)
  end
create_task:
 @SYS_CALL(CREATE_TASK)
  end
exit_task:
 @SYS_CALL(EXIT_TASK)
  end
delete_task:
 @SYS_CALL(DELETE_TASK)
  end
run_task:
 @SYS_CALL(RUN_TASK)
  end
go_task:
 @SYS_CALL(GO_TASK)
  end
wait_task:
 @SYS_CALL(WAIT_TASK)
  end
stop_task:
 @SYS_CALL(STOP_TASK)
  end
send_message:
 @SYS_CALL(SEND_MESSAGE)
  end
get_message:
 @SYS_CALL(GET_MESSAGE)
  end
exit_process:
 @SYS_CALL(EXIT_PROCESS)
  end
_wide:
 @SYS_CALL(_WIDE)
  end
_nallow:
 @SYS_CALL(_NALLOW)
  end
getc:
 @SYS_CALL(GETC)
  end
_read:
 @SYS_CALL(_READ)
  end
putc:
 @SYS_CALL(PUTC)
  end
_write:
 @SYS_CALL(_WRITE)
  end
wopen:
 @SYS_CALL(WOPEN)
  end
ropen:
 @SYS_CALL(ROPEN)
  end
open:
 @SYS_CALL(OPEN)
  end
rclose:
 @SYS_CALL(RCLOSE)
  end
wclose:
 @SYS_CALL(WCLOSE)
  end
delete:
 @SYS_CALL(DELETE)
  end
vol_open:
 @SYS_CALL(VOL_OPEN)
  end
vol_close:
 @SYS_CALL(VOL_CLOSE)
  end
vol_read:
 @SYS_CALL(VOL_READ)
  end
fprints:
 @SYS_CALL(FPRINTS)
  end
fprintd:
 @SYS_CALL(FPRINTD)
  end
fnl:
 @SYS_CALL(FNL)
  end
finputs:
 @SYS_CALL(FINPUTS)
  end
strcmp:
 @SYS_CALL(STRCMP)
  end
strcpy:
 @SYS_CALL(STRCPY)
  end
strcat:
 @SYS_CALL(STRCAT)
  end
strstr:
 @SYS_CALL(STRSTR)
  end
strlen:
 @SYS_CALL(STRLEN)
  end
atoi:
 @SYS_CALL(ATOI)
  end
itoa:
 @SYS_CALL(ITOA)
  end
bin:
 @SYS_CALL(BIN)
  end
oct:
 @SYS_CALL(OCT)
  end
dec:
 @SYS_CALL(DEC)
  end
hex:
 @SYS_CALL(HEX)
  end
abs:
 @SYS_CALL(ABS)
  end
palloc:
 @SYS_CALL(PALLOC)
  end
pfree:
 @SYS_CALL(PFREE)
  end
malloc:
 @SYS_CALL(MALLOC)
  end
free:
 @SYS_CALL(FREE)
  end
load:
 @SYS_CALL(LOAD)
  end
cls:
 @SYS_CALL(CLS)
  end
locate:
 @SYS_CALL(LOCATE)
  end
cursor:
 @SYS_CALL(CURSOR)
  end
inkey:
 @SYS_CALL(INKEY)
  end
getch:
 @SYS_CALL(GETCH)
  end
putch:
 @SYS_CALL(PUTCH)
  end
wputs:
 @SYS_CALL(WPUTS)
  end

putchar:
  stdout#, putc
  end
nl:
  stdout#, fnl
  end
prints:
  stdout#, fprints
  end
printd:
  stdout#, fprintd
  end
getchar:
  stdin#, getc
  end
inputs:
  stdin#, finputs
  end

restore:
 read_p#=
 end

read:
 read_p#, 8, + read_p#=
 (read_p)#(-1), end

__xxmain2:

  long   _indev#,_outdev#,stdin#,stdout#,_f#
  char  _infile$(FILE_SIZE),_outfile$(FILE_SIZE)

  CONIN,    stdin#=
  CONOUT, stdout#=
  (present_task)#(INDEV/8),    _indev#=
  (present_task)#(OUTDEV/8), _outdev#=
  if (_indev)$=NULL goto __xxmain3
    _indev#,  _infile, ropen _f#=
    if _f#<>ERROR then _infile, stdin#=
__xxmain3:
  if (_outdev)$=NULL goto __xxmain4
    _outdev#,  _outfile, wopen _f#=
    if _f#<>ERROR then _outfile, stdout#=
__xxmain4:
  main
  stdin#,   rclose
  stdout#, wclose
  exit_process
  end
